from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from states.states import FillStars
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from loader import dp, bot
import logging
import datetime

ADMIN_ID = 7174828209
CHANNEL_USERNAME = "@N1TDMUZB"
CHANNEL_USERNAME1 = "@NitroDevChannel"
CHANNEL_USERNAME2 = "@python_programmerr"

users_data = {}
pending_refs = {}

# Start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    args = message.get_args()

    not_subscribed = False
    for channel in [CHANNEL_USERNAME, CHANNEL_USERNAME1, CHANNEL_USERNAME2]:
        try:
            member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status in ["left", "kicked"]:
                not_subscribed = True
                break
        except:
            not_subscribed = True
            break

    if not_subscribed:
        if args.isdigit():
            pending_refs[user_id] = int(args)

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}"),
            InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME1[1:]}"),
            InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME2[1:]}"),
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
        )
        await message.answer("üëã –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", reply_markup=keyboard)
        return

    await register_user(message, int(args) if args.isdigit() else None)

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_subscription(call: CallbackQuery):
    user_id = call.from_user.id
    not_subscribed = False
    for channel in [CHANNEL_USERNAME, CHANNEL_USERNAME1, CHANNEL_USERNAME2]:
        try:
            member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                not_subscribed = True
                break
        except:
            not_subscribed = True
            break

    if not_subscribed:
        await call.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
        return

    await call.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    args = pending_refs.pop(user_id, None)
    await register_user(call.message, args)

async def register_user(message, referrer_id=None):
    user_id = message.from_user.id
    if user_id not in users_data:
        users_data[user_id] = {"stars": 0, "referrals": 0, "last_bonus": None}

        if referrer_id and referrer_id != user_id and referrer_id in users_data:
            users_data[referrer_id]["stars"] += 3
            users_data[referrer_id]["referrals"] += 1

            try:
                await bot.send_message(
                    referrer_id,
                    f"üÜï –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n"
                    f"üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 3‚≠ê.\n"
                    f"üîÑ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users_data[referrer_id]['stars']}‚≠ê"
                )
            except:
                pass

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", "üë• –í–∞—à–∞ —Å—Å—ã–ª–∫–∞")
    keyboard.add("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üí∏ –í—ã–≤–æ–¥")

    if message.from_user.id == ADMIN_ID:
        keyboard.add("‚≠ê –ù–∞—á–∏—Å–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã")

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
async def bonus(message: types.Message):
    user_id = message.from_user.id
    today = datetime.date.today()
    user = users_data.get(user_id)
    if user is None:
        return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.")

    if user["last_bonus"] == today:
        await message.answer("üìÖ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!")
    else:
        user["stars"] += 1
        user["last_bonus"] = today
        await message.answer("‚≠ê –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ 1 –∑–≤–µ–∑–¥–∞! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π.")

@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profil(message: types.Message):
    user = users_data.get(message.from_user.id)
    if not user:
        return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    await message.answer(f"""
üßë‚Äçüíª –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

‚≠ê –ó–≤–µ–∑–¥—ã: {user['stars']}
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {user['referrals']}
""")

@dp.message_handler(lambda m: m.text == "üë• –í–∞—à–∞ —Å—Å—ã–ª–∫–∞")
async def ref_link(message: types.Message):
    user_id = message.from_user.id
    user = users_data.get(user_id)
    if not user:
        return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    await message.answer(f"""
üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π!

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/{(await bot.get_me()).username}?start={user_id}

üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: 3‚≠ê
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user["referrals"]}
""")

@dp.message_handler(lambda m: m.text == "üí∏ –í—ã–≤–æ–¥")
async def vyvod(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí≥ 15‚≠ê", "üí≥ 25‚≠ê", "üí≥ 50‚≠ê", "üí≥ 100‚≠ê")
    keyboard.add("üîô –ù–∞–∑–∞–¥")
    await message.answer("üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text in ["üí≥ 15‚≠ê", "üí≥ 25‚≠ê", "üí≥ 50‚≠ê", "üí≥ 100‚≠ê"])
async def handle_withdraw(message: types.Message):
    user_id = message.from_user.id
    user = users_data.get(user_id)
    if not user:
        return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    amount = int(message.text.replace("üí≥ ", "").replace("‚≠ê", ""))
    if user["stars"] >= amount:
        user["stars"] -= amount
        await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚≠ê —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        username = f"@{message.from_user.username}" if message.from_user.username else f"ID: {user_id}"
        admin_msg = (
            f"üí∏ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üÜî ID: {user_id}\n"
            f"‚≠ê –°—É–º–º–∞: {amount}\n"
        )

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ", callback_data=f"paid:{user_id}"))

        await bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)
    else:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –£ –≤–∞—Å: {user['stars']}‚≠ê")

@dp.callback_query_handler(lambda c: c.data.startswith("paid:"))
async def paid_handler(call: types.CallbackQuery):
    user_id = int(call.data.split(":")[1])
    try:
        await bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        await call.message.edit_reply_markup()
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤—ã–ø–ª–∞—Ç–µ.")
    except:
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", show_alert=True)

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def back_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", "üë• –í–∞—à–∞ —Å—Å—ã–ª–∫–∞")
    keyboard.add("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üí∏ –í—ã–≤–æ–¥")
    await message.answer("‚¨ÖÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "‚≠ê –ù–∞—á–∏—Å–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã")
async def start_fill_stars(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await FillStars.waiting_for_user_id.set()

@dp.message_handler(state=FillStars.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
    await state.update_data(user_id=int(message.text))
    await message.answer("‚≠ê –°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–∏—Ç—å?")
    await FillStars.waiting_for_amount.set()

@dp.message_handler(state=FillStars.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
    data = await state.get_data()
    user_id = data["user_id"]
    amount = int(message.text)

    if user_id not in users_data:
        users_data[user_id] = {"stars": 0, "referrals": 0, "last_bonus": None}

    users_data[user_id]["stars"] += amount
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount}‚≠ê")

    try:
        await bot.send_message(
            user_id,
            f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚≠ê\nüîÑ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users_data[user_id]['stars']}‚≠ê"
        )
    except:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")

    await state.finish()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
